{
    "website_title": "blog by willwam845",
    "website_url": "http://localhost:4000/",
    "posts": [
        
            {
                "title": "angstromctf 2021 writeups",
                "content_text": "AngstromCTF 2021I participated in AngstromCTF 2021 as part of The WinRaRs, as it was the first CTF we did as a team in 2020. The Angstrom team did a very good job at making ~toxic~ interesting challenges, and it was also nice to try out some other categories for a change. We placed 30th, and here I will write up the challenges that I solved that I found interesting.Home Rolled - CryptoAplet made his own block cipher! Can you break it?Author: EvilMuffinHa#!/usr/bin/pythonimport binasciifrom random import choiceclass Cipher:    BLOCK_SIZE = 16    ROUNDS = 3    def __init__(self, key):        assert(len(key) == self.BLOCK_SIZE*self.ROUNDS)        self.key = key    def __block_encrypt(self, block):        enc = int.from_bytes(block, \"big\")        for i in range(self.ROUNDS):            k = int.from_bytes(self.key[i*self.BLOCK_SIZE:(i+1)*self.BLOCK_SIZE], \"big\")            enc &amp;= k            enc ^= k        return hex(enc)[2:].rjust(self.BLOCK_SIZE*2, \"0\")    def __pad(self, msg):        if len(msg) % self.BLOCK_SIZE != 0:            return msg + (bytes([0]) * (self.BLOCK_SIZE - (len(msg) % self.BLOCK_SIZE)))        else:            return msg        def encrypt(self, msg):        m = self.__pad(msg)        e = \"\"        for i in range(0, len(m), self.BLOCK_SIZE):            e += self.__block_encrypt(m[i:i+self.BLOCK_SIZE])        return e.encode()key = binascii.unhexlify(\"\".join([choice(list(\"abcdef0123456789\")) for a in range(Cipher.BLOCK_SIZE*Cipher.ROUNDS*2)]))with open(\"flag\", \"rb\") as f:    flag = f.read()cipher = Cipher(key)while True:    a = input(\"Would you like to encrypt [1], or try encrypting [2]? \")    if a == \"1\":        p = input(\"What would you like to encrypt: \")        try:            print(cipher.encrypt(binascii.unhexlify(p)).decode())        except:            print(\"Invalid input. \")    elif a == \"2\":        for i in range(10):            p = \"\".join([choice(list(\"abcdef0123456789\")) for a in range(64)])            print(\"Encrypt this:\", p)            e = cipher.encrypt(binascii.unhexlify(p)).decode()            c = input()            if e != c:                print(\"L\")                exit()        print(\"W\")        print(flag.decode())                elif a.lower() == \"quit\":        print(\"Bye\")        exit()    else:        print(\"Invalid input. \")We have a server which implements a custom block cipher, allowing us to encrypt anything, and then asking us for the encryption of a random plaintext it gives. The block cipher just uses standard ECB mode, so we only have the block cipher to attack.The interesting function here is the __block_encrypt function, which, we can assume encrypts a single block of ciphertext. Looking closely, it only performs a logical AND and a logical XOR on the state and the key. This means that none of the bits affect each other. Knowing this, it is very easy to encrypt a chosen plaintext, as each bit will always become a certain value, and we can create a lookup table for each bit, that is, what bit it becomes if it is originally a 0 bit, and what bit it becomes when it is originally a 1 bit.Implementation below.from pwn import *s = remote(\"crypto.2021.chall.actf.co\", 21602)s.recvuntil(\"[2]?\").decode().split(\"\\n\")s.sendline(\"1\")s.sendline(\"0\" * 32)ct0 = bin(int(s.recvuntil(\"[2]?\").decode().split(\"\\n\")[0][-32:], 16))[2:].zfill(128)s.sendline(\"1\")s.sendline(\"f\" * 32)ct1 = bin(int(s.recvuntil(\"[2]?\").decode().split(\"\\n\")[0][-32:], 16))[2:].zfill(128)s.sendline(\"2\")for i in range(10):  ct = bin(int(s.recvline().decode()[-65:-1], 16))[2:].zfill(256)  o = \"\"  for c,x in enumerate(ct):    if x == \"0\":      o += ct0[c%128]    else:      o += ct1[c%128]  ct = int(o, 2)  s.sendline(hex(ct)[2:].zfill(16))s.interactive()# i whipped this up in 3 minutes before ctf end please dont judge kthanksFlag: actf{no_bit_shuffling_is_trivial}I’m So Random - CryptoAplet's quirky and unique so he made my own PRNG! It's not like the other PRNGs, its absolutely unbreakable!Author: EvilMuffinHaimport timeimport randomimport osclass Generator():    DIGITS = 8    def __init__(self, seed):        self.seed = seed        assert(len(str(self.seed)) == self.DIGITS)    def getNum(self):        self.seed = int(str(self.seed**2).rjust(self.DIGITS*2, \"0\")[self.DIGITS//2:self.DIGITS + self.DIGITS//2])        return self.seedr1 = Generator(random.randint(10000000, 99999999))r2 = Generator(random.randint(10000000, 99999999))query_counter = 0while True:    query = input(\"Would you like to get a random output [r], or guess the next random number [g]? \")    if query.lower() not in [\"r\", \"g\"]:        print(\"Invalid input.\")        break    else:        if query.lower() == \"r\" and query_counter &lt; 3:            print(r1.getNum() * r2.getNum())            query_counter += 1;        elif query_counter &gt;= 3 and query.lower() == \"r\":            print(\"You don't get more random numbers!\")        else:            for i in range(2):                guess = int(input(\"What is your guess to the next value generated? \"))                if guess != r1.getNum() * r2.getNum():                    print(\"Incorrect!\")                    exit()            with open(\"flag\", \"r\") as f:                fleg = f.read()            print(\"Congrats! Here's your flag: \")            print(fleg)            exit()This challenge gives us 2 PRNGS, and then returns the product of them. Our goal is to recover the next product of 2 states.Knowing that the states have 8 digits in them, we just factor the given number states until one of them is 8 digits, in which case we can simply reseed the PRNGS, and get the next product.I did this one manually, it usually doesn’t take many tries to get one state with a factor.Flag: actf{middle_square_method_more_like_middle_fail_method}Thunderbolt - CryptobinaryThis challenge gives us a binary. ~how toxic for a crypto challenge~I spent a long time trying to reverse it, as I thought this was crypto rev, but I was in fact proven wrong. The gist of the reversing is that it reads in our plaintext, appends the flag to the plaintext, then it reads in 2 keys, one being 16 bytes and the other being the length of the plaintext, and then does some weird keystream generation. It then does some weird XOR things and encrypts the plaintext.I didn’t realise it at the time, but this was just an implementation of RC4 (how silly of me)Anyway, the vulnerability is in the implementation of RC4, more specifically how they implement the swapping part.Opening it up in ghidra:It seems to use the XOR swap method to do swapping during encryption. This removes the need to create a temporary variable, which is pretty useful. However, problems arise when the two values being swapped are the same. The two values XORed together will result in both of the values turning into 0’s instead of being swapped. Interesting.If we send a lot of bytes to the server, this means that over time, the keystream will be corrupted with null bytes. We should then be able to find the flag at the end, as it should not be XORed with anything.Therefore, our solve script simply becomes:python -c 'print(\"\\x01\" * 15000)' | nc crypto.2021.chall.actf.co 21603 | tail -c 200(We have to use \\x01 bytes because since the binary uses fgets, which terminates at null bytes, so it doesn’t actually become part of the plaintext)Our flag therefore is:Flag: actf{watch_the_edge_cases_31b2eb7440e6992c33f3e5bbd184}",
                "content_html": "<h1 id=\"angstromctf-2021\">AngstromCTF 2021</h1><p>I participated in AngstromCTF 2021 as part of The WinRaRs, as it was the first CTF we did as a team in 2020. The Angstrom team did a very good job at making ~toxic~ interesting challenges, and it was also nice to try out some other categories for a change. We placed 30th, and here I will write up the challenges that I solved that I found interesting.</p><h2 id=\"home-rolled---crypto\">Home Rolled - Crypto</h2><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Aplet made his own block cipher! Can you break it?Author: EvilMuffinHa</code></pre></div></div><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/python</span><span class=\"kn\">import</span> <span class=\"nn\">binascii</span><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">choice</span><span class=\"k\">class</span> <span class=\"nc\">Cipher</span><span class=\"p\">:</span>    <span class=\"n\">BLOCK_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>    <span class=\"n\">ROUNDS</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>        <span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ROUNDS</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>    <span class=\"k\">def</span> <span class=\"nf\">__block_encrypt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">block</span><span class=\"p\">):</span>        <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"o\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">,</span> <span class=\"s\">\"big\"</span><span class=\"p\">)</span>        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ROUNDS</span><span class=\"p\">):</span>            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"o\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">:(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">],</span> <span class=\"s\">\"big\"</span><span class=\"p\">)</span>            <span class=\"n\">enc</span> <span class=\"o\">&amp;=</span> <span class=\"n\">k</span>            <span class=\"n\">enc</span> <span class=\"o\">^=</span> <span class=\"n\">k</span>        <span class=\"k\">return</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">rjust</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">__pad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"n\">msg</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">)))</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"n\">msg</span>        <span class=\"k\">def</span> <span class=\"nf\">encrypt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__pad</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>        <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">):</span>            <span class=\"n\">e</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__block_encrypt</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">])</span>        <span class=\"k\">return</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">binascii</span><span class=\"o\">.</span><span class=\"n\">unhexlify</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">\"abcdef0123456789\"</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">Cipher</span><span class=\"o\">.</span><span class=\"n\">BLOCK_SIZE</span><span class=\"o\">*</span><span class=\"n\">Cipher</span><span class=\"o\">.</span><span class=\"n\">ROUNDS</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)]))</span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"flag\"</span><span class=\"p\">,</span> <span class=\"s\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>    <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"n\">cipher</span> <span class=\"o\">=</span> <span class=\"n\">Cipher</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"Would you like to encrypt [1], or try encrypting [2]? \"</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"s\">\"1\"</span><span class=\"p\">:</span>        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"What would you like to encrypt: \"</span><span class=\"p\">)</span>        <span class=\"k\">try</span><span class=\"p\">:</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">binascii</span><span class=\"o\">.</span><span class=\"n\">unhexlify</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span>        <span class=\"k\">except</span><span class=\"p\">:</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Invalid input. \"</span><span class=\"p\">)</span>    <span class=\"k\">elif</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"s\">\"2\"</span><span class=\"p\">:</span>        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s\">\"abcdef0123456789\"</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">)])</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Encrypt this:\"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">)</span>            <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">cipher</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">binascii</span><span class=\"o\">.</span><span class=\"n\">unhexlify</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>            <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">()</span>            <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"o\">!=</span> <span class=\"n\">c</span><span class=\"p\">:</span>                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"L\"</span><span class=\"p\">)</span>                <span class=\"nb\">exit</span><span class=\"p\">()</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"W\"</span><span class=\"p\">)</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span>                <span class=\"k\">elif</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s\">\"quit\"</span><span class=\"p\">:</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Bye\"</span><span class=\"p\">)</span>        <span class=\"nb\">exit</span><span class=\"p\">()</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Invalid input. \"</span><span class=\"p\">)</span></code></pre></div></div><p>We have a server which implements a custom block cipher, allowing us to encrypt anything, and then asking us for the encryption of a random plaintext it gives. The block cipher just uses standard ECB mode, so we only have the block cipher to attack.</p><p>The interesting function here is the <code class=\"highlighter-rouge\">__block_encrypt</code> function, which, we can assume encrypts a single block of ciphertext. Looking closely, it only performs a logical AND and a logical XOR on the state and the key. This means that none of the bits affect each other. Knowing this, it is very easy to encrypt a chosen plaintext, as each bit will always become a certain value, and we can create a lookup table for each bit, that is, what bit it becomes if it is originally a 0 bit, and what bit it becomes when it is originally a 1 bit.</p><p>Implementation below.</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">pwn</span> <span class=\"kn\">import</span> <span class=\"o\">*</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"s\">\"crypto.2021.chall.actf.co\"</span><span class=\"p\">,</span> <span class=\"mi\">21602</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">\"[2]?\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"0\"</span> <span class=\"o\">*</span> <span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"n\">ct0</span> <span class=\"o\">=</span> <span class=\"nb\">bin</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">\"[2]?\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"p\">:],</span> <span class=\"mi\">16</span><span class=\"p\">))[</span><span class=\"mi\">2</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"f\"</span> <span class=\"o\">*</span> <span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"n\">ct1</span> <span class=\"o\">=</span> <span class=\"nb\">bin</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">\"[2]?\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"p\">:],</span> <span class=\"mi\">16</span><span class=\"p\">))[</span><span class=\"mi\">2</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"2\"</span><span class=\"p\">)</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>  <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"nb\">bin</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recvline</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()[</span><span class=\"o\">-</span><span class=\"mi\">65</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">16</span><span class=\"p\">))[</span><span class=\"mi\">2</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">)</span>  <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>  <span class=\"k\">for</span> <span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s\">\"0\"</span><span class=\"p\">:</span>      <span class=\"n\">o</span> <span class=\"o\">+=</span> <span class=\"n\">ct0</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"o\">%</span><span class=\"mi\">128</span><span class=\"p\">]</span>    <span class=\"k\">else</span><span class=\"p\">:</span>      <span class=\"n\">o</span> <span class=\"o\">+=</span> <span class=\"n\">ct1</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"o\">%</span><span class=\"mi\">128</span><span class=\"p\">]</span>  <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">zfill</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">()</span><span class=\"c1\"># i whipped this up in 3 minutes before ctf end please dont judge kthanks</span></code></pre></div></div><p><code class=\"highlighter-rouge\">Flag: actf{no_bit_shuffling_is_trivial}</code></p><h2 id=\"im-so-random---crypto\">I’m So Random - Crypto</h2><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Aplet's quirky and unique so he made my own PRNG! It's not like the other PRNGs, its absolutely unbreakable!Author: EvilMuffinHa</code></pre></div></div><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"kn\">import</span> <span class=\"nn\">random</span><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"k\">class</span> <span class=\"nc\">Generator</span><span class=\"p\">():</span>    <span class=\"n\">DIGITS</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">seed</span>        <span class=\"k\">assert</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DIGITS</span><span class=\"p\">)</span>    <span class=\"k\">def</span> <span class=\"nf\">getNum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rjust</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DIGITS</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">)[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DIGITS</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DIGITS</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DIGITS</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">])</span>        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">10000000</span><span class=\"p\">,</span> <span class=\"mi\">99999999</span><span class=\"p\">))</span><span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">10000000</span><span class=\"p\">,</span> <span class=\"mi\">99999999</span><span class=\"p\">))</span><span class=\"n\">query_counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"Would you like to get a random output [r], or guess the next random number [g]? \"</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s\">\"r\"</span><span class=\"p\">,</span> <span class=\"s\">\"g\"</span><span class=\"p\">]:</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Invalid input.\"</span><span class=\"p\">)</span>        <span class=\"k\">break</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">if</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s\">\"r\"</span> <span class=\"ow\">and</span> <span class=\"n\">query_counter</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">getNum</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">r2</span><span class=\"o\">.</span><span class=\"n\">getNum</span><span class=\"p\">())</span>            <span class=\"n\">query_counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>        <span class=\"k\">elif</span> <span class=\"n\">query_counter</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span> <span class=\"ow\">and</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s\">\"r\"</span><span class=\"p\">:</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"You don't get more random numbers!\"</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>                <span class=\"n\">guess</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"What is your guess to the next value generated? \"</span><span class=\"p\">))</span>                <span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"o\">!=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">getNum</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">r2</span><span class=\"o\">.</span><span class=\"n\">getNum</span><span class=\"p\">():</span>                    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Incorrect!\"</span><span class=\"p\">)</span>                    <span class=\"nb\">exit</span><span class=\"p\">()</span>            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"flag\"</span><span class=\"p\">,</span> <span class=\"s\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>                <span class=\"n\">fleg</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Congrats! Here's your flag: \"</span><span class=\"p\">)</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fleg</span><span class=\"p\">)</span>            <span class=\"nb\">exit</span><span class=\"p\">()</span></code></pre></div></div><p>This challenge gives us 2 PRNGS, and then returns the product of them. Our goal is to recover the next product of 2 states.</p><p>Knowing that the states have 8 digits in them, we just factor the given number states until one of them is 8 digits, in which case we can simply reseed the PRNGS, and get the next product.</p><p>I did this one manually, it usually doesn’t take many tries to get one state with a factor.</p><p><code class=\"highlighter-rouge\">Flag: actf{middle_square_method_more_like_middle_fail_method}</code></p><h2 id=\"thunderbolt---crypto\">Thunderbolt - Crypto</h2><p><a href=\"https://willwam845.github.io/ctffiles/angstrom2021/thunderbolt\">binary</a></p><p>This challenge gives us a binary. ~how toxic for a crypto challenge~</p><p>I spent a long time trying to reverse it, as I thought this was crypto rev, but I was in fact proven wrong. The gist of the reversing is that it reads in our plaintext, appends the flag to the plaintext, then it reads in 2 keys, one being 16 bytes and the other being the length of the plaintext, and then does some weird keystream generation. It then does some weird XOR things and encrypts the plaintext.</p><p>I didn’t realise it at the time, but this was just an implementation of RC4 (how silly of me)</p><p>Anyway, the vulnerability is in the implementation of RC4, more specifically how they implement the swapping part.</p><p>Opening it up in ghidra:</p><p><img src=\"/images/angstromctf2021/1.png\" alt=\"hm\" /></p><p>It seems to use the XOR swap method to do swapping during encryption. This removes the need to create a temporary variable, which is pretty useful. However, problems arise when the two values being swapped are the same. The two values XORed together will result in both of the values turning into 0’s instead of being swapped. Interesting.</p><p>If we send a lot of bytes to the server, this means that over time, the keystream will be corrupted with null bytes. We should then be able to find the flag at the end, as it should not be XORed with anything.</p><p>Therefore, our solve script simply becomes:</p><p><code class=\"highlighter-rouge\">python -c 'print(\"\\x01\" * 15000)' | nc crypto.2021.chall.actf.co 21603 | tail -c 200</code></p><p>(We have to use \\x01 bytes because since the binary uses fgets, which terminates at null bytes, so it doesn’t actually become part of the plaintext)</p><p>Our flag therefore is:</p><p><code class=\"highlighter-rouge\">Flag: actf{watch_the_edge_cases_31b2eb7440e6992c33f3e5bbd184}</code></p>",
                "url": "http://localhost:4000/posts/angstromctf/",
                
                                
                
                "tags": ["ctf,","crypto"],
                "date_published": "2021-04-08T01:00:00+01:00",
                "date_modified": "2021-04-08T01:00:00+01:00",
                
                "author":  "" 
                
            },
        
            {
                "title": "pbctf 2020 writeups",
                "content_text": "Perfect Blue CTF 2020I participated in Perfect Blue CTF hosted by the wonderful team perfect blue with the Crusaders of Rust. We placed 11th, which I think is pretty good!Here’s my writeups for the challenges that I solved.GCombo - miscOne day I spied out my friend accessing some google form to enter his secret combination lock. Afterwards, I kept bothering him about it, and he finally decided to give the link to me. Maybe you can figure out his combo for me and get a tasty flag in return:By: theKidOfArcranialinkSurvey?This challenge presents us with a Google Forms site. This is typical for a survey challenge, and so we start by carrying out a KPBSA (known plaintext survey blood attack). We know the flag format is pbctf{text_here}, and so we search for this in the source.Upon doing so, we see that the flag is pbctf{&lt;digits you got along the way&gt;_&lt;password&gt;}Now, this was not the actual flag, and this is because we need to actually find these things in the Google Forms.We see that the Google Form itself prompts us with a selection screen with a “combination lock”. This is where the actual challenge begins.A quick guide to Google FormsThe whole reason why our KPBSA works is because Google Forms stores the data of the survey in the source of the html page, meaning that, if there are multiple sections to the form, you can see the oother sections before you complete the first.Google Forms also has a functionality, which allows you to, based on a user’s response, give them a section of the survey. The challenge uses this in order to “check” our password.But how does the form know what options lead where?Well, if we look at the survey itself, we see that each number option has a number after it.Notice how after the 5, the number is different from the rest? This means that the location is different to all the others, and we can therefore assume that “5” is the first character of our pin.But now where do we go?We need to find some way to figure out where this takes us, and what the number means. To do this, I’m going to do some local testing.I created this very simple form, which only has one question. It redirects to the next section if you pick “no”, redirects back to the same section if you select “yes”, and redirects to the third section if you pick “maybe”.We can now take a look at the public data created from this Google Form[null,[\"\",[[2007564277,\"is it\",null,2,[[1668954036,[[\"yes\",null,-1,null,0],[\"no\",null,1475128018,null,0],[\"maybe\",null,2106518918,null,0]],0,null,null,null,null,null,0]]],[1475128018,\"Flag\",\"wow its a flag well done\",8],[2106518918,\"i hate you\",null,8]],null,null,null,[0,0],null,[1,\"\"],\"is stego bad\",48,[null,null,null,null,0],null,null,null,null,[2]]Notice the numbers after the “no” option and “maybe” option, which should redirect us to sections 2 and 3, are the same as the numbers before the texts of those sections? Now we have a way to get where an option will lead!Solving the challengeFirstly, we know that the flag is the series of digits followed by some sort of password, so we start by trying to look for this password.We, after briefly scrolling through the html, find this line.That’s most likely our password! And notice how it also has a section number, meaning that we can trace where it came from.751651474 &gt; ?Searching for this number in the code, we find that it takes us to this section if we enter a “0” as the last digit of our pin.Now the path is quite clear, we need to go back and retrieve all the digits by working backwards using the section numbers as our guide.We do this to get:751651474 &gt; 1385363611 - digit 01385363611 &gt; 1566374398 - digit 71566374398 &gt; 46599266 - digit 346599266 &gt; 1138684813 - digit 31138684813 &gt; 1996292448 - digit 91996292448 &gt; 1737460359 - digit 61737460359 &gt; 147720654 - digit 2147720654 &gt; 1094087816 - digit 11094087816 &gt; 1114266997 - digit 81114266997 &gt; 938169490 - digit 5Reversing the obtained digits gets us our actual pin: 5812693370And we have our password from before, so we have all we need for our flag!Flag: pbctf{5812693370_s3cuR3_p1n_id_2_3v3ry0ne}Triviacool fact i was in fact inspiration for this challegeso thats pretty nifty i thinkAinissesthai - CryptoA team of codebreakers had to invent computers to break this cipher. Can you figure out what the flag is?By: UnblvRdownloadWe get a single download, along with a server to connect to. Let’s have a look at the download, which is presumably the source code for the server.#!/bin/env python3from string import ascii_uppercase as UCfrom random import SystemRandomfrom enigma.machine import EnigmaMachinefrom secretstuff import FLAG, PLUGBOARD_SETTINGSassert FLAG.isupper() # Without pbcft{...}random = SystemRandom()for _ in range(50):    ROTORS = [random.choice((\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\")) for _ in range(3)]    REFLECTOR = random.choice((\"B\", \"C\", \"B-Thin\", \"C-Thin\"))    RING_SETTINGS = [random.randrange(26) for _ in range(3)]    machine = EnigmaMachine.from_key_sheet(           rotors=ROTORS,           reflector=REFLECTOR,           ring_settings=RING_SETTINGS,           plugboard_settings=PLUGBOARD_SETTINGS)    machine.set_display(''.join(random.sample(UC, 3)))    ciphertext = machine.process_text(FLAG)    print(ciphertext)Seems we are dealing with the classical Enigma cipher.Upon further inspection of the code, we see that we also don’t have any way to interact with the server, we just get output.The server seems to generate a random set of parameters for the rotors, reflector and ring settings, however it doesn’t change the plugboard settings, as those are read from a file.The vulnerability here is that when you encrypt a single character with enigma, it is impossible to get the encrypted character be the same as the original plaintext character.This means we can use an attack which I like to call the “no leeks” attack. Basically, if we check, for each position, which letter of the alphabet never appears, we know that that character was the original plaintext character.Implementation below:from string import ascii_uppercaseoutput = open(\"output.txt\").read().strip().split(\"\\n\") # just 200 lines of outputplaintext = [\"\"] * len(output[0])for i in range(len(plaintext)):  candidates = list(ascii_uppercase)  for out in output:    if out[i] in candidates:      candidates.remove(out[i])  assert len(candidates) == 1  plaintext[i] = candidates[0]print(f\"Flag: pbctf{{{''.join(plaintext)}}}\")Flag: pbctf{FATALFLAWINENIGMA}Strong Cipher - Rev/CryptoMultiplication is better than addition.By: rbtreebinaryciphertextThe ReversingNow, I don’t really do rev, so I decided to leave this up to my teammates, and luckily, my teammate will135 did most of the reversing for me. The basic idea is that it takes in 3 arguments, which are 3 files, an input file, a key file and an output file.The key is truncated to 16 bytes, and then acts like a XOR key; it is repeated to the length of the plaintext.Then, byte by byte, the key and the plaintext byte are multiplied in the galois field of \\(2^{8}\\).Galois field multiplication?Galois field multiplication works slightly differently from normal multiplication, and I found a very nice site explaining it.It also gives pseudocode for a multiplication function, which goes as follows:  Take in 2 parameters a, and b.  Set the product, p, to 0  repeat 8 times:          if b % 2 == 1                  perform a logical or on p and a, and make p the result                    check if a’s MSB is 1, and remember this for later      rotate a left by one bit      if a’s MSB was 1:                  perform a logical or on a and the hex number 0x1b                    shift b one place to the right.        p is now the product of a and bThis was quick and easy to implement in python, so I wrote a function to do it.def multiply(a,b):  p = 0  for _ in range(8):    if b % 2:      p ^= a    check = a &amp; 0x80    a &lt;&lt;= 1    if check == 0x80:      a ^= 0x1b    b &gt;&gt;= 1  return p % 256Now, we need to figure out some way to decrypt our own messages, given a key and ciphertext. Basically, we find the inverse of our key, and then do multiplication by the inverse to get to the original character, similar to how modular division works.def multiply(a,b):  p = 0  for _ in range(8):    if b % 2:      p ^= a    check = a &amp; 0x80    a &lt;&lt;= 1    if check == 0x80:      a ^= 0x1b    b &gt;&gt;= 1  return p % 256def div(a,b):  for i in range(256):    if multiply(b,i) == a:      return idef decrypt(ct, key):  key = [div(1,x) for i,x in enumerate(key)]  o = []  ct = list(ct)  key = list(key) * ((len(ct)//len(key))+2)  for i, p in enumerate(ct):    o.append(multiply(key[i%len(key)], p))  return(\"\".join([chr(x) for x in o]).encode('latin-1'))Key recoveryAlright… so now we need the key… how are we going to do that?Well, we can assume/~guess~ that the plaintext will be somewhat text, with the flag buried in there somewhere.Now, since the key is repeated, it acts like a multi-byte xor key, and since we know the maximum length of the key can only be 16, we can bruteforce this key length too.Since we can guess most of the plaintext will be readable, we can, for each byte of the key, bruteforce all 256 possible bytes, and then see what byte results in the most readable plaintext, just in case all of it isn’t readable.Implementation below:ciphertext = open(\"ciphertext\",\"rb\").read()def multiply(a,b):  p = 0  for _ in range(8):    if b % 2:      p ^= a    check = a &amp; 0x80    a &lt;&lt;= 1    if check == 0x80:      a ^= 0x1b    b &gt;&gt;= 1  return p % 256def div(a,b):  for i in range(256):    if multiply(b,i) == a:      return idef decrypt(ct, key):  key = [div(1,x) for i,x in enumerate(key)]  o = []  ct = list(ct)  key = list(key) * ((len(ct)//len(key))+2)  for i, p in enumerate(ct):    o.append(multiply(key[i%len(key)], p))  return(\"\".join([chr(x) for x in o]).encode('latin-1'))for keylen in range(1,16):  key = [\"\"] * keylen  ct = [ciphertext[i:i+keylen] for i in range(0, len(ciphertext), keylen)][:-1]  for i in range(keylen):    maxval = [0,0]    for byte in range(256):      c = 0      for _ct in ct:        char = multiply(_ct[i], byte)        if char &gt;= 32 and char &lt;= 128:c += 1      if c &gt; maxval[0]:        maxval[0] = c        maxval[1] = byte    key[i] = maxval[1]  key = [div(1,x) for i,x in enumerate(key)]  print(f\"Key for length {keylen}:\",\"\".join([chr(x) for x in key]))  pt = decrypt(ciphertext, key)  if b'pbctf{' not in pt:    print(\"Not correct key...\")  else:    print(\"Found!\", pt.decode())    exit()We then get a lovely Wikipedia article on finite field arithmetic, along with the flag!Flag: pbctf{I_love_gf2p8mul!Heart_hEart_heArt_heaRt_hearT}Thanks to qopruzjf and will135 for working on this with me :)",
                "content_html": "<h1 id=\"perfect-blue-ctf-2020\">Perfect Blue CTF 2020</h1><p>I participated in Perfect Blue CTF hosted by the wonderful team <a href=\"https://perfect.blue/\">perfect blue</a> with the <a href=\"https://ctftime.org/team/132628\">Crusaders of Rust</a>. We placed 11th, which I think is pretty good!</p><p>Here’s my writeups for the challenges that I solved.</p><h1 id=\"gcombo---misc\">GCombo - misc</h1><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>One day I spied out my friend accessing some google form to enter his secret combination lock. Afterwards, I kept bothering him about it, and he finally decided to give the link to me. Maybe you can figure out his combo for me and get a tasty flag in return:By: theKidOfArcrania</code></pre></div></div><p><a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe7sOTLHmGjmUY3iE6E7QLqeYAZDfQXsiJrz8r-ZcA_4cXNFQ/viewform\">link</a></p><h3 id=\"survey\">Survey?</h3><p>This challenge presents us with a Google Forms site. This is typical for a survey challenge, and so we start by carrying out a KPBSA (known plaintext survey blood attack). We know the flag format is <code class=\"highlighter-rouge\">pbctf{text_here}</code>, and so we search for this in the source.</p><p>Upon doing so, we see that the flag is <code class=\"highlighter-rouge\">pbctf{&lt;digits you got along the way&gt;_&lt;password&gt;}</code></p><p><img src=\"/images/pbctf2020/flagthonk.PNG\" alt=\"pls gimme flag ;-;\" /></p><p>Now, this was not the actual flag, and this is because we need to actually find these things in the Google Forms.</p><p>We see that the Google Form itself prompts us with a selection screen with a “combination lock”. This is where the actual challenge begins.</p><h3 id=\"a-quick-guide-to-google-forms\">A quick guide to Google Forms</h3><p>The whole reason why our KPBSA works is because Google Forms stores the data of the survey in the source of the html page, meaning that, if there are multiple sections to the form, you can see the oother sections before you complete the first.</p><p>Google Forms also has a functionality, which allows you to, based on a user’s response, give them a section of the survey. The challenge uses this in order to “check” our password.</p><p>But how does the form know what options lead where?</p><p>Well, if we look at the survey itself, we see that each number option has a number after it.</p><p><img src=\"/images/pbctf2020/numbers.PNG\" alt=\"cool numbers\" /></p><p>Notice how after the 5, the number is different from the rest? This means that the location is different to all the others, and we can therefore assume that “5” is the first character of our pin.</p><p>But now where do we go?</p><p>We need to find some way to figure out where this takes us, and what the number means. To do this, I’m going to do some local testing.</p><p>I created this very simple form, which only has one question. It redirects to the next section if you pick “no”, redirects back to the same section if you select “yes”, and redirects to the third section if you pick “maybe”.</p><p><img src=\"/images/pbctf2020/form.PNG\" alt=\"do you like stego\" /></p><p>We can now take a look at the public data created from this Google Form</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[null,[\"\",[[2007564277,\"is it\",null,2,[[1668954036,[[\"yes\",null,-1,null,0],[\"no\",null,1475128018,null,0],[\"maybe\",null,2106518918,null,0]],0,null,null,null,null,null,0]]],[1475128018,\"Flag\",\"wow its a flag well done\",8],[2106518918,\"i hate you\",null,8]],null,null,null,[0,0],null,[1,\"\"],\"is stego bad\",48,[null,null,null,null,0],null,null,null,null,[2]]</code></pre></div></div><p>Notice the numbers after the “no” option and “maybe” option, which should redirect us to sections 2 and 3, are the same as the numbers before the texts of those sections? Now we have a way to get where an option will lead!</p><h3 id=\"solving-the-challenge\">Solving the challenge</h3><p>Firstly, we know that the flag is the series of digits followed by some sort of password, so we start by trying to look for this password.</p><p>We, after briefly scrolling through the html, find this line.</p><p>That’s most likely our password! And notice how it also has a section number, meaning that we can trace where it came from.</p><p><img src=\"/images/pbctf2020/passwordplease.PNG\" alt=\"shiny password ooo\" /></p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>751651474 &gt; ?</code></pre></div></div><p>Searching for this number in the code, we find that it takes us to this section if we enter a “0” as the last digit of our pin.</p><p><img src=\"/images/pbctf2020/goback.PNG\" alt=\"go back\" /></p><p>Now the path is quite clear, we need to go back and retrieve all the digits by working backwards using the section numbers as our guide.</p><p>We do this to get:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>751651474 &gt; 1385363611 - digit 01385363611 &gt; 1566374398 - digit 71566374398 &gt; 46599266 - digit 346599266 &gt; 1138684813 - digit 31138684813 &gt; 1996292448 - digit 91996292448 &gt; 1737460359 - digit 61737460359 &gt; 147720654 - digit 2147720654 &gt; 1094087816 - digit 11094087816 &gt; 1114266997 - digit 81114266997 &gt; 938169490 - digit 5</code></pre></div></div><p>Reversing the obtained digits gets us our actual pin: 5812693370</p><p>And we have our password from before, so we have all we need for our flag!</p><p>Flag: <code class=\"highlighter-rouge\">pbctf{5812693370_s3cuR3_p1n_id_2_3v3ry0ne}</code></p><h3 id=\"trivia\">Trivia</h3><p>cool fact i was in fact inspiration for this challege</p><p><img src=\"/images/pbctf2020/inspiration.PNG\" alt=\"inspirative\" /></p><p>so thats pretty nifty i think</p><h1 id=\"ainissesthai---crypto\">Ainissesthai - Crypto</h1><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>A team of codebreakers had to invent computers to break this cipher. Can you figure out what the flag is?By: UnblvR</code></pre></div></div><p><a href=\"https://willwam845.github.io/ctffiles/pbctf2020/ainissesthai.py\">download</a></p><p>We get a single download, along with a server to connect to. Let’s have a look at the download, which is presumably the source code for the server.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/bin/env python3</span><span class=\"kn\">from</span> <span class=\"nn\">string</span> <span class=\"kn\">import</span> <span class=\"n\">ascii_uppercase</span> <span class=\"k\">as</span> <span class=\"n\">UC</span><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">SystemRandom</span><span class=\"kn\">from</span> <span class=\"nn\">enigma.machine</span> <span class=\"kn\">import</span> <span class=\"n\">EnigmaMachine</span><span class=\"kn\">from</span> <span class=\"nn\">secretstuff</span> <span class=\"kn\">import</span> <span class=\"n\">FLAG</span><span class=\"p\">,</span> <span class=\"n\">PLUGBOARD_SETTINGS</span><span class=\"k\">assert</span> <span class=\"n\">FLAG</span><span class=\"o\">.</span><span class=\"n\">isupper</span><span class=\"p\">()</span> <span class=\"c1\"># Without pbcft{...}</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">SystemRandom</span><span class=\"p\">()</span><span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">):</span>    <span class=\"n\">ROTORS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">((</span><span class=\"s\">\"I\"</span><span class=\"p\">,</span><span class=\"s\">\"II\"</span><span class=\"p\">,</span><span class=\"s\">\"III\"</span><span class=\"p\">,</span><span class=\"s\">\"IV\"</span><span class=\"p\">,</span><span class=\"s\">\"V\"</span><span class=\"p\">,</span><span class=\"s\">\"VI\"</span><span class=\"p\">,</span><span class=\"s\">\"VII\"</span><span class=\"p\">,</span><span class=\"s\">\"VIII\"</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>    <span class=\"n\">REFLECTOR</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">((</span><span class=\"s\">\"B\"</span><span class=\"p\">,</span> <span class=\"s\">\"C\"</span><span class=\"p\">,</span> <span class=\"s\">\"B-Thin\"</span><span class=\"p\">,</span> <span class=\"s\">\"C-Thin\"</span><span class=\"p\">))</span>    <span class=\"n\">RING_SETTINGS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>    <span class=\"n\">machine</span> <span class=\"o\">=</span> <span class=\"n\">EnigmaMachine</span><span class=\"o\">.</span><span class=\"n\">from_key_sheet</span><span class=\"p\">(</span>           <span class=\"n\">rotors</span><span class=\"o\">=</span><span class=\"n\">ROTORS</span><span class=\"p\">,</span>           <span class=\"n\">reflector</span><span class=\"o\">=</span><span class=\"n\">REFLECTOR</span><span class=\"p\">,</span>           <span class=\"n\">ring_settings</span><span class=\"o\">=</span><span class=\"n\">RING_SETTINGS</span><span class=\"p\">,</span>           <span class=\"n\">plugboard_settings</span><span class=\"o\">=</span><span class=\"n\">PLUGBOARD_SETTINGS</span><span class=\"p\">)</span>    <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">set_display</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">UC</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>    <span class=\"n\">ciphertext</span> <span class=\"o\">=</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">process_text</span><span class=\"p\">(</span><span class=\"n\">FLAG</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ciphertext</span><span class=\"p\">)</span></code></pre></div></div><p>Seems we are dealing with the classical Enigma cipher.</p><p>Upon further inspection of the code, we see that we also don’t have any way to interact with the server, we just get output.</p><p>The server seems to generate a random set of parameters for the rotors, reflector and ring settings, however it doesn’t change the plugboard settings, as those are read from a file.</p><p>The vulnerability here is that when you encrypt a single character with enigma, it is <strong>impossible</strong> to get the encrypted character be the same as the original plaintext character.</p><p>This means we can use an attack which I like to call the “no leeks” attack. Basically, if we check, for each position, which letter of the alphabet never appears, we know that that character was the original plaintext character.</p><p>Implementation below:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">string</span> <span class=\"kn\">import</span> <span class=\"n\">ascii_uppercase</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"output.txt\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># just 200 lines of output</span><span class=\"n\">plaintext</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">plaintext</span><span class=\"p\">)):</span>  <span class=\"n\">candidates</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ascii_uppercase</span><span class=\"p\">)</span>  <span class=\"k\">for</span> <span class=\"n\">out</span> <span class=\"ow\">in</span> <span class=\"n\">output</span><span class=\"p\">:</span>    <span class=\"k\">if</span> <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">candidates</span><span class=\"p\">:</span>      <span class=\"n\">candidates</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>  <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">candidates</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>  <span class=\"n\">plaintext</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">candidates</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">\"Flag: pbctf{{{''.join(plaintext)}}}\"</span><span class=\"p\">)</span></code></pre></div></div><p>Flag: <code class=\"highlighter-rouge\">pbctf{FATALFLAWINENIGMA}</code></p><h1 id=\"strong-cipher---revcrypto\">Strong Cipher - Rev/Crypto</h1><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Multiplication is better than addition.By: rbtree</code></pre></div></div><p><a href=\"https://willwam845.github.io/ctffiles/pbctf2020/strong_cipher_binary\">binary</a><a href=\"https://willwam845.github.io/ctffiles/pbctf2020/strong_cipher_ciphertext\">ciphertext</a></p><h3 id=\"the-reversing\">The Reversing</h3><p>Now, I don’t really do rev, so I decided to leave this up to my teammates, and luckily, my teammate <a href=\"https://www.willsroot.io/\">will135</a> did most of the reversing for me. The basic idea is that it takes in 3 arguments, which are 3 files, an input file, a key file and an output file.</p><p>The key is truncated to 16 bytes, and then acts like a XOR key; it is repeated to the length of the plaintext.</p><p>Then, byte by byte, the key and the plaintext byte are multiplied in the galois field of \\(2^{8}\\).</p><h3 id=\"galois-field-multiplication\">Galois field multiplication?</h3><p>Galois field multiplication works slightly differently from normal multiplication, and I found a very nice <a href=\"https://www.samiam.org/galois.html\">site</a> explaining it.</p><p>It also gives pseudocode for a multiplication function, which goes as follows:</p><ul>  <li>Take in 2 parameters <code class=\"highlighter-rouge\">a</code>, and <code class=\"highlighter-rouge\">b</code>.</li>  <li>Set the product, <code class=\"highlighter-rouge\">p</code>, to 0</li>  <li>repeat 8 times:    <ul>      <li>if <code class=\"highlighter-rouge\">b</code> % 2 == 1        <ul>          <li>perform a logical or on <code class=\"highlighter-rouge\">p</code> and <code class=\"highlighter-rouge\">a</code>, and make <code class=\"highlighter-rouge\">p</code> the result</li>        </ul>      </li>      <li>check if <code class=\"highlighter-rouge\">a</code>’s MSB is 1, and remember this for later</li>      <li>rotate <code class=\"highlighter-rouge\">a</code> left by one bit</li>      <li>if <code class=\"highlighter-rouge\">a</code>’s MSB was 1:        <ul>          <li>perform a logical or on <code class=\"highlighter-rouge\">a</code> and the hex number 0x1b</li>        </ul>      </li>      <li>shift <code class=\"highlighter-rouge\">b</code> one place to the right.</li>    </ul>  </li>  <li><code class=\"highlighter-rouge\">p</code> is now the product of <code class=\"highlighter-rouge\">a</code> and <code class=\"highlighter-rouge\">b</code></li></ul><p>This was quick and easy to implement in python, so I wrote a function to do it.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">multiply</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">:</span>      <span class=\"n\">p</span> <span class=\"o\">^=</span> <span class=\"n\">a</span>    <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x80</span>    <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span>    <span class=\"k\">if</span> <span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mh\">0x80</span><span class=\"p\">:</span>      <span class=\"n\">a</span> <span class=\"o\">^=</span> <span class=\"mh\">0x1b</span>    <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>  <span class=\"k\">return</span> <span class=\"n\">p</span> <span class=\"o\">%</span> <span class=\"mi\">256</span></code></pre></div></div><p>Now, we need to figure out some way to decrypt our own messages, given a key and ciphertext. Basically, we find the inverse of our key, and then do multiplication by the inverse to get to the original character, similar to how modular division works.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">multiply</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">:</span>      <span class=\"n\">p</span> <span class=\"o\">^=</span> <span class=\"n\">a</span>    <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x80</span>    <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span>    <span class=\"k\">if</span> <span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mh\">0x80</span><span class=\"p\">:</span>      <span class=\"n\">a</span> <span class=\"o\">^=</span> <span class=\"mh\">0x1b</span>    <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>  <span class=\"k\">return</span> <span class=\"n\">p</span> <span class=\"o\">%</span> <span class=\"mi\">256</span><span class=\"k\">def</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"p\">:</span>      <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"k\">def</span> <span class=\"nf\">decrypt</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>  <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)]</span>  <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">)</span>  <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">):</span>    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">%</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)],</span> <span class=\"n\">p</span><span class=\"p\">))</span>  <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">o</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'latin-1'</span><span class=\"p\">))</span></code></pre></div></div><h3 id=\"key-recovery\">Key recovery</h3><p>Alright… so now we need the key… how are we going to do that?</p><p>Well, we can assume/~guess~ that the plaintext will be somewhat text, with the flag buried in there somewhere.</p><p>Now, since the key is repeated, it acts like a multi-byte xor key, and since we know the maximum length of the key can only be 16, we can bruteforce this key length too.</p><p>Since we can guess most of the plaintext will be readable, we can, for each byte of the key, bruteforce all 256 possible bytes, and then see what byte results in the most readable plaintext, just in case all of it isn’t readable.</p><p>Implementation below:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ciphertext</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"ciphertext\"</span><span class=\"p\">,</span><span class=\"s\">\"rb\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"k\">def</span> <span class=\"nf\">multiply</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">:</span>      <span class=\"n\">p</span> <span class=\"o\">^=</span> <span class=\"n\">a</span>    <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0x80</span>    <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span>    <span class=\"k\">if</span> <span class=\"n\">check</span> <span class=\"o\">==</span> <span class=\"mh\">0x80</span><span class=\"p\">:</span>      <span class=\"n\">a</span> <span class=\"o\">^=</span> <span class=\"mh\">0x1b</span>    <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>  <span class=\"k\">return</span> <span class=\"n\">p</span> <span class=\"o\">%</span> <span class=\"mi\">256</span><span class=\"k\">def</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"p\">:</span>      <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"k\">def</span> <span class=\"nf\">decrypt</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>  <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)]</span>  <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">)</span>  <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">):</span>    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">%</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)],</span> <span class=\"n\">p</span><span class=\"p\">))</span>  <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">o</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'latin-1'</span><span class=\"p\">))</span><span class=\"k\">for</span> <span class=\"n\">keylen</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"p\">):</span>  <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">keylen</span>  <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ciphertext</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">keylen</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ciphertext</span><span class=\"p\">),</span> <span class=\"n\">keylen</span><span class=\"p\">)][:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">keylen</span><span class=\"p\">):</span>    <span class=\"n\">maxval</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span>    <span class=\"k\">for</span> <span class=\"n\">byte</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">):</span>      <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>      <span class=\"k\">for</span> <span class=\"n\">_ct</span> <span class=\"ow\">in</span> <span class=\"n\">ct</span><span class=\"p\">:</span>        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">_ct</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">byte</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">32</span> <span class=\"ow\">and</span> <span class=\"n\">char</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">128</span><span class=\"p\">:</span><span class=\"n\">c</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>      <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxval</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>        <span class=\"n\">maxval</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span>        <span class=\"n\">maxval</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">byte</span>    <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">maxval</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)]</span>  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">\"Key for length {keylen}:\"</span><span class=\"p\">,</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">key</span><span class=\"p\">]))</span>  <span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">ciphertext</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>  <span class=\"k\">if</span> <span class=\"n\">b</span><span class=\"s\">'pbctf{'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">pt</span><span class=\"p\">:</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Not correct key...\"</span><span class=\"p\">)</span>  <span class=\"k\">else</span><span class=\"p\">:</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Found!\"</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span>    <span class=\"nb\">exit</span><span class=\"p\">()</span></code></pre></div></div><p>We then get a lovely Wikipedia article on finite field arithmetic, along with the flag!</p><p>Flag: <code class=\"highlighter-rouge\">pbctf{I_love_gf2p8mul!Heart_hEart_heArt_heaRt_hearT}</code></p><p>Thanks to <a href=\"https://github.com/joeyzli\">qopruzjf</a> and <a href=\"https://www.willsroot.io/\">will135</a> for working on this with me :)</p>",
                "url": "http://localhost:4000/posts/pbctf/",
                
                                
                
                "tags": ["ctf,","crypto,","misc"],
                "date_published": "2020-12-06T00:00:00+00:00",
                "date_modified": "2020-12-06T00:00:00+00:00",
                
                "author":  "" 
                
            }
        
    ],
    "pages": [
            
            {
                "id": "404",
                "title": 404,
                "content_text": "  you… shouldn’t be here… you should go back",
                "content_html": "<blockquote>  <p>you… shouldn’t be here… you should go <a href=\"/\">back</a></p></blockquote>",
                "url": "http://localhost:4000/404.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "about me",
                "title": "about me",
                "content_text": "there is nothing more to know about me goodbye",
                "content_html": "<p>there is nothing more to know about me goodbye</p>",
                "url": "http://localhost:4000/about.html",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "content_html": "{    \"website_title\": \"{{ site.title | xml_escape }}\",    \"website_url\": \"{{ \"/\" | absolute_url }}\",    \"posts\": [        {% for post in site.posts %}            {                \"title\": {{ post.title | jsonify }},                \"content_text\": {{ post.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ post.content | strip_newlines | jsonify }},                \"url\": \"{{ post.url | absolute_url }}\",                {% if post.image.size > 0 %}                \"image\": {{ post.image | jsonify }},{% endif %}                {% if post.categories.size > 0 %}                \"categories\": {{ post.categories | jsonify }},{% endif %}                                {% if post.tags.size > 0 %}                \"tags\": {{ post.tags | jsonify }},{% endif %}                \"date_published\": \"{{ post.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ post.date | date_to_xmlschema }}\",                {% if post.author %}                \"author\": {% if post.author.name %} \"{{ post.author.name }}\" {% else %} \"{{ post.author }}\" {% endif %}                {% else %}                \"author\": {% if site.author.name %} \"{{ site.author.name }}\" {% else %} \"{{ site.author }}\" {% endif %}                {% endif %}            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ],    \"pages\": [            {% for page in site.pages %}            {                \"id\": {{page.title | downcase | jsonify}},                \"title\": {{ page.title | jsonify }},                \"content_text\": {{ page.content | strip_html | strip_newlines | jsonify }},                \"content_html\": {{ page.content | strip_newlines | jsonify }},                \"url\": \"{{ page.url | absolute_url }}\",                \"date_published\": \"{{ page.date | date_to_xmlschema }}\",                \"date_modified\": \"{{ page.date | date_to_xmlschema }}\"            }{% if forloop.last == false %},{% endif %}        {% endfor %}    ]           }",
                "url": "http://localhost:4000/api.json",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "posts",
                "title": "posts",
                "content_text": "{% for post in site.posts %}{{post.title}}tags: {{post.tags}}{%endfor%}",
                "content_html": "{% for post in site.posts %}<a href=\"{{site.baseurl}}{{post.url}}\">{{post.title}}</a><span class=\"post-tags\">tags: {{post.tags}}</span>{%endfor%}",
                "url": "http://localhost:4000/",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}{% endif %}{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}{% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }}{% endif %}{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}{{ file.modified_time | date_to_xmlschema }}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xsl\" href=\"{{ \"/sitemap.xsl\" | absolute_url }}\"?>{% endif %}<urlset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\" xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">{% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %}<url><loc>{{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if doc.last_modified_at or doc.date %}<lastmod>{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %}<url><loc>{{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }}</loc>{% if page.last_modified_at %}<lastmod>{{ page.last_modified_at | date_to_xmlschema }}</lastmod>{% endif %}</url>{% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %}<url><loc>{{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }}</loc><lastmod>{{ file.modified_time | date_to_xmlschema }}</lastmod></url>{% endfor %}</urlset>",
                "url": "http://localhost:4000/sitemap.xml",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "content_html": "Sitemap: {{ \"sitemap.xml\" | absolute_url }}",
                "url": "http://localhost:4000/robots.txt",
                "date_published": "",
                "date_modified": ""
            },
        
            {
                "id": "",
                "title": null,
                "content_text": "{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}",
                "content_html": "<?xml version=\"1.0\" encoding=\"utf-8\"?>{% if page.xsl %}<?xml-stylesheet type=\"text/xml\" href=\"{{ '/feed.xslt.xml' | absolute_url }}\"?>{% endif %}<feed xmlns=\"http://www.w3.org/2005/Atom\" {% if site.lang %}xml:lang=\"{{ site.lang }}\"{% endif %}><generator uri=\"https://jekyllrb.com/\" version=\"{{ jekyll.version }}\">Jekyll</generator><link href=\"{{ page.url | absolute_url }}\" rel=\"self\" type=\"application/atom+xml\" /><link href=\"{{ '/' | absolute_url }}\" rel=\"alternate\" type=\"text/html\" {% if site.lang %}hreflang=\"{{ site.lang }}\" {% endif %}/><updated>{{ site.time | date_to_xmlschema }}</updated><id>{{ page.url | absolute_url | xml_escape }}</id>{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}<title type=\"html\">{{ title | smartify | xml_escape }}</title>{% endif %}{% if site.description %}<subtitle>{{ site.description | xml_escape }}</subtitle>{% endif %}{% if site.author %}<author><name>{{ site.author.name | default: site.author | xml_escape }}</name>{% if site.author.email %}<email>{{ site.author.email | xml_escape }}</email>{% endif %}{% if site.author.uri %}<uri>{{ site.author.uri | xml_escape }}</uri>{% endif %}</author>{% endif %}{% assign posts = site[page.collection] | where_exp: \"post\", \"post.draft != true\" | sort: \"date\" | reverse %}{% if page.category %}{% assign posts = posts | where: \"category\",page.category %}{% endif %}{% for post in posts limit: 10 %}<entry{% if post.lang %}{{\" \"}}xml:lang=\"{{ post.lang }}\"{% endif %}><title type=\"html\">{{ post.title | smartify | strip_html | normalize_whitespace | xml_escape }}</title><link href=\"{{ post.url | absolute_url }}\" rel=\"alternate\" type=\"text/html\" title=\"{{ post.title | xml_escape }}\" /><published>{{ post.date | date_to_xmlschema }}</published><updated>{{ post.last_modified_at | default: post.date | date_to_xmlschema }}</updated><id>{{ post.id | absolute_url | xml_escape }}</id>{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}<content type=\"html\" xml:base=\"{{ post.url | absolute_url | xml_escape }}\">{{ post.content | strip | xml_escape }}</content>{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}<author><name>{{ post_author_name | default: \"\" | xml_escape }}</name>{% if post_author_email %}<email>{{ post_author_email | xml_escape }}</email>{% endif %}{% if post_author_uri %}<uri>{{ post_author_uri | xml_escape }}</uri>{% endif %}</author>{% if post.category %}<category term=\"{{ post.category | xml_escape }}\" />{% endif %}{% for tag in post.tags %}<category term=\"{{ tag | xml_escape }}\" />{% endfor %}{% if post.excerpt and post.excerpt != empty %}<summary type=\"html\">{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}</summary>{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}<media:thumbnail xmlns:media=\"http://search.yahoo.com/mrss/\" url=\"{{ post_image | xml_escape }}\" /><media:content medium=\"image\" url=\"{{ post_image | xml_escape }}\" xmlns:media=\"http://search.yahoo.com/mrss/\" />{% endif %}</entry>{% endfor %}</feed>",
                "url": "http://localhost:4000/feed.xml",
                "date_published": "",
                "date_modified": ""
            }
        
    ]           
}